//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

THBaseService_exists_args = function(args) {
  this.table = null;
  this.get = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.get !== undefined) {
      this.get = args.get;
    }
  }
};
THBaseService_exists_args.prototype = {};
THBaseService_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.get = new ttypes.TGet();
        this.get.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_exists_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_exists_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.get !== null && this.get !== undefined) {
    output.writeFieldBegin('get', Thrift.Type.STRUCT, 2);
    this.get.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_exists_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_exists_result.prototype = {};
THBaseService_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_exists_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_get_args = function(args) {
  this.table = null;
  this.get = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.get !== undefined) {
      this.get = args.get;
    }
  }
};
THBaseService_get_args.prototype = {};
THBaseService_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.get = new ttypes.TGet();
        this.get.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_get_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_get_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.get !== null && this.get !== undefined) {
    output.writeFieldBegin('get', Thrift.Type.STRUCT, 2);
    this.get.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_get_result.prototype = {};
THBaseService_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_get_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getMultiple_args = function(args) {
  this.table = null;
  this.gets = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.gets !== undefined) {
      this.gets = args.gets;
    }
  }
};
THBaseService_getMultiple_args.prototype = {};
THBaseService_getMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.gets = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = new ttypes.TGet();
          elem112.read(input);
          this.gets.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.gets !== null && this.gets !== undefined) {
    output.writeFieldBegin('gets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.gets.length);
    for (var iter113 in this.gets)
    {
      if (this.gets.hasOwnProperty(iter113))
      {
        iter113 = this.gets[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getMultiple_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_getMultiple_result.prototype = {};
THBaseService_getMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = new ttypes.TResult();
          elem120.read(input);
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        iter121.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_put_args = function(args) {
  this.table = null;
  this.put = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.put !== undefined) {
      this.put = args.put;
    }
  }
};
THBaseService_put_args.prototype = {};
THBaseService_put_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.put = new ttypes.TPut();
        this.put.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_put_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_put_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.put !== null && this.put !== undefined) {
    output.writeFieldBegin('put', Thrift.Type.STRUCT, 2);
    this.put.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_put_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_put_result.prototype = {};
THBaseService_put_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_put_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_put_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndPut_args = function(args) {
  this.table = null;
  this.row = null;
  this.family = null;
  this.qualifier = null;
  this.value = null;
  this.put = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.family !== undefined) {
      this.family = args.family;
    }
    if (args.qualifier !== undefined) {
      this.qualifier = args.qualifier;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.put !== undefined) {
      this.put = args.put;
    }
  }
};
THBaseService_checkAndPut_args.prototype = {};
THBaseService_checkAndPut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.put = new ttypes.TPut();
        this.put.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndPut_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndPut_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 4);
    output.writeString(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.put !== null && this.put !== undefined) {
    output.writeFieldBegin('put', Thrift.Type.STRUCT, 6);
    this.put.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndPut_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_checkAndPut_result.prototype = {};
THBaseService_checkAndPut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndPut_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndPut_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_putMultiple_args = function(args) {
  this.table = null;
  this.puts = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.puts !== undefined) {
      this.puts = args.puts;
    }
  }
};
THBaseService_putMultiple_args.prototype = {};
THBaseService_putMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.puts = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = new ttypes.TPut();
          elem128.read(input);
          this.puts.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_putMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_putMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.puts !== null && this.puts !== undefined) {
    output.writeFieldBegin('puts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.puts.length);
    for (var iter129 in this.puts)
    {
      if (this.puts.hasOwnProperty(iter129))
      {
        iter129 = this.puts[iter129];
        iter129.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_putMultiple_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_putMultiple_result.prototype = {};
THBaseService_putMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_putMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_putMultiple_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteSingle_args = function(args) {
  this.table = null;
  this.deleteSingle = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.deleteSingle !== undefined) {
      this.deleteSingle = args.deleteSingle;
    }
  }
};
THBaseService_deleteSingle_args.prototype = {};
THBaseService_deleteSingle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteSingle = new ttypes.TDelete();
        this.deleteSingle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteSingle_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteSingle_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.deleteSingle !== null && this.deleteSingle !== undefined) {
    output.writeFieldBegin('deleteSingle', Thrift.Type.STRUCT, 2);
    this.deleteSingle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteSingle_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteSingle_result.prototype = {};
THBaseService_deleteSingle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteSingle_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteSingle_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteMultiple_args = function(args) {
  this.table = null;
  this.deletes = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.deletes !== undefined) {
      this.deletes = args.deletes;
    }
  }
};
THBaseService_deleteMultiple_args.prototype = {};
THBaseService_deleteMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.deletes = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = new ttypes.TDelete();
          elem136.read(input);
          this.deletes.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.deletes !== null && this.deletes !== undefined) {
    output.writeFieldBegin('deletes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.deletes.length);
    for (var iter137 in this.deletes)
    {
      if (this.deletes.hasOwnProperty(iter137))
      {
        iter137 = this.deletes[iter137];
        iter137.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteMultiple_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteMultiple_result.prototype = {};
THBaseService_deleteMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.success = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new ttypes.TDelete();
          elem144.read(input);
          this.success.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter145 in this.success)
    {
      if (this.success.hasOwnProperty(iter145))
      {
        iter145 = this.success[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndDelete_args = function(args) {
  this.table = null;
  this.row = null;
  this.family = null;
  this.qualifier = null;
  this.value = null;
  this.deleteSingle = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.family !== undefined) {
      this.family = args.family;
    }
    if (args.qualifier !== undefined) {
      this.qualifier = args.qualifier;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.deleteSingle !== undefined) {
      this.deleteSingle = args.deleteSingle;
    }
  }
};
THBaseService_checkAndDelete_args.prototype = {};
THBaseService_checkAndDelete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteSingle = new ttypes.TDelete();
        this.deleteSingle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndDelete_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndDelete_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 4);
    output.writeString(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.deleteSingle !== null && this.deleteSingle !== undefined) {
    output.writeFieldBegin('deleteSingle', Thrift.Type.STRUCT, 6);
    this.deleteSingle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndDelete_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_checkAndDelete_result.prototype = {};
THBaseService_checkAndDelete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndDelete_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndDelete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_increment_args = function(args) {
  this.table = null;
  this.increment = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.increment !== undefined) {
      this.increment = args.increment;
    }
  }
};
THBaseService_increment_args.prototype = {};
THBaseService_increment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.increment = new ttypes.TIncrement();
        this.increment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_increment_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_increment_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.increment !== null && this.increment !== undefined) {
    output.writeFieldBegin('increment', Thrift.Type.STRUCT, 2);
    this.increment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_increment_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_increment_result.prototype = {};
THBaseService_increment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_increment_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_increment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_openScanner_args = function(args) {
  this.table = null;
  this.scan = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.scan !== undefined) {
      this.scan = args.scan;
    }
  }
};
THBaseService_openScanner_args.prototype = {};
THBaseService_openScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_openScanner_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_openScanner_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_openScanner_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_openScanner_result.prototype = {};
THBaseService_openScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_openScanner_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_openScanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerRows_args = function(args) {
  this.scannerId = null;
  this.numRows = 1;
  if (args) {
    if (args.scannerId !== undefined) {
      this.scannerId = args.scannerId;
    }
    if (args.numRows !== undefined) {
      this.numRows = args.numRows;
    }
  }
};
THBaseService_getScannerRows_args.prototype = {};
THBaseService_getScannerRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scannerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerRows_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerRows_args');
  if (this.scannerId !== null && this.scannerId !== undefined) {
    output.writeFieldBegin('scannerId', Thrift.Type.I32, 1);
    output.writeI32(this.scannerId);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 2);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerRows_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
THBaseService_getScannerRows_result.prototype = {};
THBaseService_getScannerRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.success = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = new ttypes.TResult();
          elem152.read(input);
          this.success.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.TIllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerRows_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter153 in this.success)
    {
      if (this.success.hasOwnProperty(iter153))
      {
        iter153 = this.success[iter153];
        iter153.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_closeScanner_args = function(args) {
  this.scannerId = null;
  if (args) {
    if (args.scannerId !== undefined) {
      this.scannerId = args.scannerId;
    }
  }
};
THBaseService_closeScanner_args.prototype = {};
THBaseService_closeScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scannerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_closeScanner_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_closeScanner_args');
  if (this.scannerId !== null && this.scannerId !== undefined) {
    output.writeFieldBegin('scannerId', Thrift.Type.I32, 1);
    output.writeI32(this.scannerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_closeScanner_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
THBaseService_closeScanner_result.prototype = {};
THBaseService_closeScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.TIllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_closeScanner_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_closeScanner_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_mutateRow_args = function(args) {
  this.table = null;
  this.rowMutations = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.rowMutations !== undefined) {
      this.rowMutations = args.rowMutations;
    }
  }
};
THBaseService_mutateRow_args.prototype = {};
THBaseService_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rowMutations = new ttypes.TRowMutations();
        this.rowMutations.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_mutateRow_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.rowMutations !== null && this.rowMutations !== undefined) {
    output.writeFieldBegin('rowMutations', Thrift.Type.STRUCT, 2);
    this.rowMutations.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_mutateRow_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_mutateRow_result.prototype = {};
THBaseService_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_mutateRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerResults_args = function(args) {
  this.table = null;
  this.scan = null;
  this.numRows = 1;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.scan !== undefined) {
      this.scan = args.scan;
    }
    if (args.numRows !== undefined) {
      this.numRows = args.numRows;
    }
  }
};
THBaseService_getScannerResults_args.prototype = {};
THBaseService_getScannerResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerResults_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerResults_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerResults_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
THBaseService_getScannerResults_result.prototype = {};
THBaseService_getScannerResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.success = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = new ttypes.TResult();
          elem160.read(input);
          this.success.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerResults_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter161 in this.success)
    {
      if (this.success.hasOwnProperty(iter161))
      {
        iter161 = this.success[iter161];
        iter161.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
THBaseServiceClient.prototype = {};
THBaseServiceClient.prototype.exists = function(table, get, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_exists(table, get);
};

THBaseServiceClient.prototype.send_exists = function(table, get) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exists', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_exists_args();
  args.table = table;
  args.get = get;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_exists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_exists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exists failed: unknown result');
};
THBaseServiceClient.prototype.get = function(table, get, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get(table, get);
};

THBaseServiceClient.prototype.send_get = function(table, get) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_get_args();
  args.table = table;
  args.get = get;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
THBaseServiceClient.prototype.getMultiple = function(table, gets, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMultiple(table, gets);
};

THBaseServiceClient.prototype.send_getMultiple = function(table, gets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMultiple', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_getMultiple_args();
  args.table = table;
  args.gets = gets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_getMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMultiple failed: unknown result');
};
THBaseServiceClient.prototype.put = function(table, put, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_put(table, put);
};

THBaseServiceClient.prototype.send_put = function(table, put) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_put_args();
  args.table = table;
  args.put = put;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_put = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_put_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.checkAndPut = function(table, row, family, qualifier, value, put, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_checkAndPut(table, row, family, qualifier, value, put);
};

THBaseServiceClient.prototype.send_checkAndPut = function(table, row, family, qualifier, value, put) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkAndPut', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_checkAndPut_args();
  args.table = table;
  args.row = row;
  args.family = family;
  args.qualifier = qualifier;
  args.value = value;
  args.put = put;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_checkAndPut = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_checkAndPut_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndPut failed: unknown result');
};
THBaseServiceClient.prototype.putMultiple = function(table, puts, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_putMultiple(table, puts);
};

THBaseServiceClient.prototype.send_putMultiple = function(table, puts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putMultiple', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_putMultiple_args();
  args.table = table;
  args.puts = puts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_putMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_putMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.deleteSingle = function(table, deleteSingle, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteSingle(table, deleteSingle);
};

THBaseServiceClient.prototype.send_deleteSingle = function(table, deleteSingle) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteSingle', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_deleteSingle_args();
  args.table = table;
  args.deleteSingle = deleteSingle;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_deleteSingle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteSingle_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.deleteMultiple = function(table, deletes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteMultiple(table, deletes);
};

THBaseServiceClient.prototype.send_deleteMultiple = function(table, deletes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteMultiple', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_deleteMultiple_args();
  args.table = table;
  args.deletes = deletes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_deleteMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteMultiple failed: unknown result');
};
THBaseServiceClient.prototype.checkAndDelete = function(table, row, family, qualifier, value, deleteSingle, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_checkAndDelete(table, row, family, qualifier, value, deleteSingle);
};

THBaseServiceClient.prototype.send_checkAndDelete = function(table, row, family, qualifier, value, deleteSingle) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkAndDelete', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_checkAndDelete_args();
  args.table = table;
  args.row = row;
  args.family = family;
  args.qualifier = qualifier;
  args.value = value;
  args.deleteSingle = deleteSingle;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_checkAndDelete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_checkAndDelete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndDelete failed: unknown result');
};
THBaseServiceClient.prototype.increment = function(table, increment, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_increment(table, increment);
};

THBaseServiceClient.prototype.send_increment = function(table, increment) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('increment', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_increment_args();
  args.table = table;
  args.increment = increment;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_increment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_increment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('increment failed: unknown result');
};
THBaseServiceClient.prototype.openScanner = function(table, scan, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_openScanner(table, scan);
};

THBaseServiceClient.prototype.send_openScanner = function(table, scan) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('openScanner', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_openScanner_args();
  args.table = table;
  args.scan = scan;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_openScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_openScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('openScanner failed: unknown result');
};
THBaseServiceClient.prototype.getScannerRows = function(scannerId, numRows, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getScannerRows(scannerId, numRows);
};

THBaseServiceClient.prototype.send_getScannerRows = function(scannerId, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScannerRows', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_getScannerRows_args();
  args.scannerId = scannerId;
  args.numRows = numRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_getScannerRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getScannerRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScannerRows failed: unknown result');
};
THBaseServiceClient.prototype.closeScanner = function(scannerId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_closeScanner(scannerId);
};

THBaseServiceClient.prototype.send_closeScanner = function(scannerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeScanner', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_closeScanner_args();
  args.scannerId = scannerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_closeScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_closeScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
THBaseServiceClient.prototype.mutateRow = function(table, rowMutations, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRow(table, rowMutations);
};

THBaseServiceClient.prototype.send_mutateRow = function(table, rowMutations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_mutateRow_args();
  args.table = table;
  args.rowMutations = rowMutations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.getScannerResults = function(table, scan, numRows, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getScannerResults(table, scan, numRows);
};

THBaseServiceClient.prototype.send_getScannerResults = function(table, scan, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScannerResults', Thrift.MessageType.CALL, this.seqid);
  var args = new THBaseService_getScannerResults_args();
  args.table = table;
  args.scan = scan;
  args.numRows = numRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_getScannerResults = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getScannerResults_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScannerResults failed: unknown result');
};
THBaseServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
THBaseServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

THBaseServiceProcessor.prototype.process_exists = function(seqid, input, output) {
  var args = new THBaseService_exists_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.exists(args.table, args.get, function (err, result) {
    var result = new THBaseService_exists_result((err != null ? err : {success: result}));
    output.writeMessageBegin("exists", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new THBaseService_get_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get(args.table, args.get, function (err, result) {
    var result = new THBaseService_get_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_getMultiple = function(seqid, input, output) {
  var args = new THBaseService_getMultiple_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getMultiple(args.table, args.gets, function (err, result) {
    var result = new THBaseService_getMultiple_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getMultiple", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_put = function(seqid, input, output) {
  var args = new THBaseService_put_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.put(args.table, args.put, function (err, result) {
    var result = new THBaseService_put_result((err != null ? err : {success: result}));
    output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_checkAndPut = function(seqid, input, output) {
  var args = new THBaseService_checkAndPut_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.checkAndPut(args.table, args.row, args.family, args.qualifier, args.value, args.put, function (err, result) {
    var result = new THBaseService_checkAndPut_result((err != null ? err : {success: result}));
    output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_putMultiple = function(seqid, input, output) {
  var args = new THBaseService_putMultiple_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.putMultiple(args.table, args.puts, function (err, result) {
    var result = new THBaseService_putMultiple_result((err != null ? err : {success: result}));
    output.writeMessageBegin("putMultiple", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_deleteSingle = function(seqid, input, output) {
  var args = new THBaseService_deleteSingle_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteSingle(args.table, args.deleteSingle, function (err, result) {
    var result = new THBaseService_deleteSingle_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteSingle", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_deleteMultiple = function(seqid, input, output) {
  var args = new THBaseService_deleteMultiple_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteMultiple(args.table, args.deletes, function (err, result) {
    var result = new THBaseService_deleteMultiple_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteMultiple", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_checkAndDelete = function(seqid, input, output) {
  var args = new THBaseService_checkAndDelete_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.checkAndDelete(args.table, args.row, args.family, args.qualifier, args.value, args.deleteSingle, function (err, result) {
    var result = new THBaseService_checkAndDelete_result((err != null ? err : {success: result}));
    output.writeMessageBegin("checkAndDelete", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_increment = function(seqid, input, output) {
  var args = new THBaseService_increment_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.increment(args.table, args.increment, function (err, result) {
    var result = new THBaseService_increment_result((err != null ? err : {success: result}));
    output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_openScanner = function(seqid, input, output) {
  var args = new THBaseService_openScanner_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.openScanner(args.table, args.scan, function (err, result) {
    var result = new THBaseService_openScanner_result((err != null ? err : {success: result}));
    output.writeMessageBegin("openScanner", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_getScannerRows = function(seqid, input, output) {
  var args = new THBaseService_getScannerRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getScannerRows(args.scannerId, args.numRows, function (err, result) {
    var result = new THBaseService_getScannerRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getScannerRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_closeScanner = function(seqid, input, output) {
  var args = new THBaseService_closeScanner_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.closeScanner(args.scannerId, function (err, result) {
    var result = new THBaseService_closeScanner_result((err != null ? err : {success: result}));
    output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new THBaseService_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRow(args.table, args.rowMutations, function (err, result) {
    var result = new THBaseService_mutateRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

THBaseServiceProcessor.prototype.process_getScannerResults = function(seqid, input, output) {
  var args = new THBaseService_getScannerResults_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getScannerResults(args.table, args.scan, args.numRows, function (err, result) {
    var result = new THBaseService_getScannerResults_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getScannerResults", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

